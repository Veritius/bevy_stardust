//! Types and traits for accessing channels.

use std::marker::PhantomData;
use bevy::prelude::*;

/// Types that can be used to interface with Stardust's message reading and writing APIs.
/// 
/// ```
/// // Defining a channel type is simple
/// #[derive(TypePath)]
/// pub struct MyChannel;
/// 
/// // You can make channels private
/// #[derive(TypePath)]
/// struct MyPrivateChannel;
/// 
/// // You can make channels with generic type bounds too
/// #[derive(TypePath)]
/// struct MyGenericChannel<T: Channel>(PhantomData<T>);
/// ```
/// 
/// In Stardust, `Channel` trait objects are just used for their type data.
/// The type itself isn't actually stored. That means you can do things like this.
/// 
/// ```
/// #[derive(TypePath, Event)]
/// pub struct MovementEvent(pub Vec3);
///
/// fn main() {
///     app.add_event::<MovementEvent>();
///     app.add_channel::<MovementEvent>();
///     app.add_system(PostUpdate, |mut events: EventReader<MovementEvent>, mut writer: NetworkWriter<MovementEvent>| {
///         let target = Entity::PLACEHOLDER;
///         for event in events.iter() {
///             let bytes = &[0u8;32]; // Some kind of serialisation logic
///             writer.send(target, bytes.into());
///         }
///     });
/// }
/// ```
pub trait Channel: TypePath + Send + Sync + 'static {}
impl<T: TypePath + Send + Sync + 'static> Channel for T {}

/// Typed marker component for filtering channel entities.
#[derive(Component)]
pub(super) struct ChannelMarker<C: Channel>(pub PhantomData<C>);

impl<C: Channel> Default for ChannelMarker<C> {
    fn default() -> Self {
        Self(Default::default())
    }
}

/// The maximum amount of channels that can exist.
pub const CHANNEL_ID_LIMIT: u32 = 2u32.pow(24);

/// A unique 24-bit channel identifier. Uses a `u32` internally.
/// 
/// Channel identifiers are generated by the `ChannelRegistry` and are unique to the `World` they originated from.
/// Attempting to use a `ChannelId` in another `World` will probably panic, or give you unintended results.
#[derive(Debug, Clone, Copy, Hash, Reflect, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChannelId(u32);

impl TryFrom<u32> for ChannelId {
    type Error = ();

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        if value > CHANNEL_ID_LIMIT { return Err(()) }
        Ok(Self(value))
    }
}

impl From<[u8;3]> for ChannelId {
    fn from(value: [u8;3]) -> Self {
        Self(u32::from_le_bytes([value[0], value[1], value[2], 0].into()))
    }
}

impl From<ChannelId> for u32 {
    fn from(value: ChannelId) -> Self {
        value.0
    }
}

impl From<ChannelId> for [u8;3] {
    fn from(value: ChannelId) -> Self {
        let value = value.0.to_le_bytes();
        [value[0], value[1], value[2]]
    }
}