use bevy::prelude::*;
use super::ChannelRegistry;

/// Types that can be used to identify channels within the type system.
pub trait Channel: TypePath + Send + Sync + 'static {}

impl<T: TypePath + Send + Sync + 'static> Channel for T {}

/// A sequential channel identifier that can be used to access data without type information.
/// 
/// Channel identifiers are generated by the `ChannelRegistry` and are unique to the `World` they originated from.
/// Attempting to use a `ChannelId` in another `World` will probably panic, or give you unintended results.
#[derive(Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord, Reflect)]
#[repr(transparent)]
pub struct ChannelId(u32);

impl std::fmt::Debug for ChannelId {
    #[inline(always)]
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.0.fmt(f)
    }
}

impl From<u32> for ChannelId {
    fn from(value: u32) -> Self {
        Self(value)
    }
}

impl From<[u8;4]> for ChannelId {
    fn from(value: [u8;4]) -> Self {
        Self(u32::from_be_bytes(value))
    }
}

impl From<ChannelId> for u32 {
    fn from(value: ChannelId) -> Self {
        value.0
    }
}

impl From<ChannelId> for usize {
    fn from(value: ChannelId) -> Self {
        value.0 as usize
    }
}

impl From<ChannelId> for [u8;4] {
    fn from(value: ChannelId) -> Self {
        value.0.to_be_bytes()
    }
}

/// Types that can be used to access channel data in a channel registry.
pub trait ToChannelId: sealed::Sealed {
    /// Convert the type to a `ChannelId`
    fn to_channel_id(&self, registry: impl AsRef<ChannelRegistry>) -> Option<ChannelId>;
}

impl ToChannelId for ChannelId {
    #[inline]
    fn to_channel_id(&self, _: impl AsRef<ChannelRegistry>) -> Option<ChannelId> {
        Some(self.clone())
    }
}

impl ToChannelId for std::any::TypeId {
    fn to_channel_id(&self, registry: impl AsRef<ChannelRegistry>) -> Option<ChannelId> {
        registry.as_ref().channel_type_ids.get(&self).cloned()
    }
}

impl ToChannelId for &dyn bevy::reflect::Reflect {
    fn to_channel_id(&self, registry: impl AsRef<ChannelRegistry>) -> Option<ChannelId> {
        self.type_id().to_channel_id(registry)
    }
}

mod sealed {
    pub trait Sealed {}
    impl Sealed for super::ChannelId {}
    impl Sealed for std::any::TypeId {}
    impl Sealed for &dyn bevy::reflect::Reflect {}
}