mod events;
mod framing;
mod header;
mod incoming;
mod outgoing;

use crate::{ConnectionEvent, ConnectionShared};

pub(crate) use incoming::IncomingStreams;
pub(crate) use outgoing::{OutgoingStreams, OutgoingStreamsHandle};

pub use events::StreamEvent;

impl ConnectionShared {
    fn stream_event(&mut self, event: StreamEvent) {
        self.event_queue.push(ConnectionEvent::StreamEvent(event));
    }
}

/// A stream identifier for an **outgoing** (sending) QUIC stream.
/// 
/// Generated by the state machine.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SendStreamId(pub u64);

/// A stream identifier for an **incoming** (receiving) QUIC stream.
/// 
/// Generated by the QUIC implementation.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct RecvStreamId(pub u64);